@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Class="py-4 card-overflow">
            <MudContainer Class="d-flex flex-column align-center gap-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large"/>
                <MudText>@TaskText</MudText>
            </MudContainer>
            <MudContainer Class="mt-3 d-flex justify-end pa-0 gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" @onclick="UserCancelled">Cancel</MudButton>
            </MudContainer>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private ServerHelper serverHelper = ServerHelper.Instance;
    private string TaskText = "";
    [Parameter] public Server Server { get; set; }
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private CancellationTokenSource token { get; set; }
    private bool UserCancel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _ = StartLoginTasks();
    }

    private async Task StartLoginTasks()
    {
        try
        {
            serverHelper.SetupHttpClient(Server);
            await CallServer(ERequestTask.Ping, "Checking connection to server");
            await CallServer(ERequestTask.Profiles, "Getting profiles from server", "Error getting profiles from server!");
            await CallServer(ERequestTask.Types, "Getting profile creation data from server", "Error getting profile creation data!");
            await CallServer(ERequestTask.Mods, "Getting active mod list from server", "Error getting mod list from server!");

        }
        catch (TaskCanceledException e) when (token is { IsCancellationRequested: true })
        {
            AbortOrFail("Request Timed out!");
            return;
        }
        catch (HttpRequestException e)
        {
            AbortOrFail();
            return;
        }
        catch (Exception e)
        {
            AbortOrFail();
            return;
        }
        
        Submit();
    }
    
    private async Task CallServer(ERequestTask option, string taskText = "", string failString = "")
    {
        token = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        TaskText = taskText;
        StateHasChanged();
        await Task.Delay(20);

        var result = option switch
        {
            ERequestTask.Ping => await serverHelper.GetAsync<PingResponse>("/launcher/v2/ping", token.Token),
            ERequestTask.Profiles => await serverHelper.GetAsync<ProfilesResponse>("/launcher/v2/profiles", token.Token),
            ERequestTask.Types => await serverHelper.GetAsync<TypesResponse>("/launcher/v2/types", token.Token),
            ERequestTask.Mods => await serverHelper.GetAsync<ModsResponse>("/launcher/v2/mods", token.Token),
            _ => false
        };

        if (!result)
        {
            AbortOrFail(failString);
            return;
        }
        token?.Dispose();
    }

    private void AbortOrFail(string message = "Error connecting to server!")
    {
        if (!UserCancel)
        {
            Snackbar.Add(message, Severity.Error);
        }

        ServerHelper.Instance.LogoutAndDispose();
        token?.Cancel();
        MudDialog.Cancel();
    }

    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(Server));
        Snackbar.Add("Logged In. Visit Profiles Page!", Severity.Success);
    }

    private void UserCancelled()
    {
        UserCancel = true;
        token?.Cancel();
        MudDialog.Cancel();
    }
}